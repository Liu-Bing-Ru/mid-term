#include <iostream>
#include <cmath>
#include <cstdlib>
#include <time.h>
using namespace std;
struct Type_shift{
    int isnight = 0;
    int isnormal = 0;
};
int bestShift(int, int, int, int, int, int, int, int [][24]);
int main()
{
    int workers, days, shiftNum, holidays/*L*/, w1, w2, requestNum;
    cin >> workers >> days >> shiftNum >> holidays >> w1/*not fulfill holiday weight*/ >> w2/*exceed night class weight*/ >> requestNum;
    int shift[shiftNum + 1][24], needs[days][24], holidayRequest[2][requestNum];
    
    cin >> shift[i][j];
    cin >> shift[0][j];
    
    cin >> needs[i][j]; //一個月中每天各時段所需員工數量
    cin >> holidayRequest[i][j];//休假需求
    
    /////////////////////////////////////////////////////////////////////////////////////////////////
   
	for (i = workers)
		for (j = days)
		worktime[i][j] = -1;
			
	//每個員工在每一天的班型 //output answer
    for (int i = 7)
		for (int j = days)
			rest[i][j] = 0;


	for (int i = 0 ~ 6)
	{
		if (i != 6)
		{
			for (int j = i; j < days; j = j + 7)
				rest[i][j] = 1;		
		}
		
		if (i == 6)
		{
			for (int k = 0; k < days; k = k + 7)
				rest[i][k + 6] = 1;	
		}
	}
	
	
	for (i = workers)
	{
		for (j = days)
		{
			int k = i % 7;
			if (rest[k][j] == 1)
			{
				worktime[i][j] = 0;
			}		
		}
	}
	
	
	for (i = requestNum) {
		if (worktime[holidayRequest[workers]][holidayRequest[days] != 0) {
			worktime[holidayRequest[workers][holidayRequest[workers] = 0;
		}
	}//滿足特殊休假需求
	//////////////////////////////////////////////////////////////////////////
	    int shiftty = 0, dayshift = 0, nightshift = 0;
        shiftty = bestShift(workers, days, shiftNum, holidays, w1, w2, requestNum, shift);
        dayshift = shiftty / 1000;
        nightshift = shiftty - (dayshift * 1000);
      
	for (i = workers)
	{
		for (int j = i % 7; j < days; j = j + 7) {
		    
		    if((j + 1) < days){
		        worktime[i][j + 1] = nightshift;
		        //cout<<j+1<<" ";
		    }
		}
	//	cout << endl;
	}//不是休假 就七天分一個夜班
	
	for (i = workers)
	{
		for (int j = 0; j < days; j++) {
			if (worktime[i][j] != (0 && nightshift))
			worktime[i][j] = dayshift;
		}
	}//不是七天休假 也不是夜班 就分配日班
	
    ///////////////////////////////////////////////////////////////////////////////
    int countRest[100] = {0};
	for (i = workers)
	{
		for (j = days)
		{
			if (worktime[i][j] == 0)
				{
					countRest[i] = countRest[i] + 1;//第i號員工休假幾天
				}		
		}
	}
	
    for (i = workers) {//已休假天數小於L 則給休假
        srand(time(0));
    
        while (countRest[i] < holidays) {
          int randomNum = rand();
          if (worktime[i][randomNum] != (0 && nightshift)) {
            worktime[i][randomNum] = 0;
            countRest[i]++;
          }
        }
    }
	////////////////////////////////////////cout/////////////////////////////
    for (i = workers){
		for (j = days){
			if (j == days - 1){
				cout << worktime[i][j] << '\n';
			}
			
			else{
				cout << worktime[i][j] << ",";
			}
		}
   }
    return 0;
}
////////////////////////////////////////function//////////////////////////////////////////////////////////
int bestShift(int workers, int days, int shiftNum, int holidays, int w1, int w2,
              int requestNum, int shift[][24]) {
  int nightN = 0, normalN = 0;
  int remnormal[30] = {0};
  int remnight[30] = {0};
  int arr[30][24];
  Type_shift array[30];
  
  for (i = 1 ~ shiftNum - 1) {
    for (j = 0 ~ 23) {
      if (j >= 18 && shift[i][j] == 1) {
        array[i].isnight = 1; // https://www.onlinegdb.com/online_c++_compiler#tab-stdin
      }
    }
  }

  for (i = 1 ~ shiftNum - 1) {
    if (array[i].isnight != 1) {
      array[i].isnormal = 1;
      normalN++;
      remnormal[normalN] = i; // {0, 2, 4}
    }
  }
  nightN = shiftNum - normalN;

  int k = 1;
  for (i = 1 ~ shiftNum - 1) {
    if (array[i].isnight == 1) {
      remnight[k] = i; // {0, 5, 6, 7}
      k++;
    }
  }

  //===============================下面找出兩個班表相加
  int sum[24] = {0};
  int sum1[24] = {0};

  int countOne = 0, countTwo = 0, countZero = 0;
  int bigOne = -1, bigTwo = -1, smallZero = 99;
  int remI = 0, remJ = 0;
  
  for (i = 1 ~ normalN - 1) {
    for (j = 1 ~ nightN - 1{
      for (m = 0 ~ 23) {
        sum[m] = (shift[remnormal[i]][m] + shift[remnight[j]][m]);
      }
      countOne = 0;
      countTwo = 0;
      countZero = 0;
      
      for (m = 0 ~ 23) {
        if (sum[m] == 1) {
          countOne++;
        } else if (sum[m] == 2) {
          countTwo++;
        } else if (sum[m] == 0) {
          countZero++;
        }
      }

      if (countZero < smallZero) {
        remI = remnormal[i];
        remJ = remnight[j];
        smallZero = countZero;
        bigTwo = countTwo;
      } else if (countZero == smallZero && countTwo > bigTwo) {
        remI = remnormal[i];
        remJ = remnight[j];
        bigOne = countOne;
        bigTwo = countTwo;
      }
    }
  }

  int rem = 0;
  rem = (remI * 1000) + remJ;

  return rem;
}
