#include <iostream>
#include <cmath>
using namespace std;
int bestShift();
int main()
{
    int workers, days, shiftNum, holidays/*L*/, w1, w2, requestNum;
    cin >> workers >> days >> shiftNum >> holidays >> w1/*not fulfill holiday weight*/ >> w2/*exceed night class weight*/ >> requestNum;
    int shift[shiftNum + 1][24], needs[days][24], needs1[days][24], holidayRequest[2][requestNum];
    for(int i = 0; i < (shiftNum + 1); i++){
        for(int j = 0; j < 24; j++){
            cin >> shift[i][j];//各種班型的上班狀況
        }
    }
    for(int i = 0; i < days; i++){
        for(int j = 0; j < 24; j++){
            cin >> needs[i][j]; //一個月中每天各時段所需員工數量
            
        }
    }
    for(int i = 0; i < 2; i++){
        for(int j = 0; j < requestNum; j++){
            cin >> holidayRequest[i][j];//休假需求
        }
    }
    
    for(int i = 0; i < days; i++){
        for(int j = 0; j < 24; j++){
            needs1[i][j] = needs[i][j]; 
        }
    }
    double avneed[days] = {0};//每天平均需求員工數
    
    for(int i = 0; i < days; i++){
        
        int dailysumworker = 0;
        for(int j = 0; j < 24; j++){
            dailysumworker = dailysumworker + needs[i][j];
        }
        avneed[i] = (dailysumworker / 24);
        
    }
    //以下用來踢出outlier
    int Var[days] = {0};
    for(int i = 0; i < days; i++){
        int Varsum = 0;//算變異數時用到的總和
        for(int j = 0; j < 24; j++){
            Varsum = Varsum + (needs[i][j] - avneed[i])*(needs[i][j] - avneed[i]);
        }
        Var[i] = sqrt(Varsum/24);
        //avneed[i] = (dailysumworker / 24);
    }
    for(int i = 0; i < days; i++){
        for(int j = 0; j < 24; j++){
            if((needs1[i][j] > (avneed[i]+ 1.5*Var[i])) || (needs1[i][j] < (avneed[i] - 1.5*Var[i]))){
                needs1[i][j] = -2;
            }
        }
    }
    
    double avneed1[days] = {0};
    for(int i = 0; i < days; i++){
        for(int j = 0; j < 24; j++){
            int dailysumworker1 = 0;
            int sum = 0;
            for(int j = 0; j < 24; j++){
                if(needs1[i][j != -2]){
                    dailysumworker1 = dailysumworker1 + needs1[i][j];
                    sum = sum + 1;
                    //cout << sum;
                }
            }
            avneed1[i] = (dailysumworker1 / sum);
        }
    }
    
    int haveworked[workers] = {0}; //紀錄員工已工作的天數(應小於等於days-holidays)
    int worktime[workers][days] = {-1};//每個員工在每一天的班型 //output answer
    for(int i = 0; i < days; i++){//每一天
        int demand = avneed[i];
        for(int j = 0; j < workers; j++){//每一個員工
            if(demand > 0){
                if(haveworked[j] == (days - holidays)){
                    worktime[j][i] = 0;
                }
                if((i >= 7)){
                    int hwork = 0;
                    for(int k = 1; k < 7; k++){
                       if(worktime[j-k][i] != -1)
                       hwork = hwork + 1;
                    }
                    if(hwork == 6){
                        worktime[j][i] = 0;
                    }
                }
                if(worktime[j][i] == -1){
                    //worktime[j][i] = bestShift(); //補充函式
                    haveworked[j]++;
                    demand--;
                }
                
            }
        } 
        
    }
    for(int i = 0; i < days; i++){
        cout<< i <<" "<<avneed[i]<<" "<<avneed1[i]<<endl;
       // cout << Var[i];
    }
    

    
    return 0;
}
/*
int bestShift(){
    
}



40 31 11 8 3 4 20
1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0
1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0
1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0
0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0
0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 0
0 0 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0
0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0
0 0 0 0 0 0 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1
0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
21 18 20 20 22 19 13 11 14 17 20 21 18 18 17 15 15 13 8 6 6 8 7 6
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
21 18 20 20 22 19 13 11 14 17 20 21 18 18 17 15 15 13 8 6 6 8 7 6
17 18 17 18 20 17 12 12 11 15 18 17 16 17 14 15 13 11 9 7 8 7 7 6
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
21 18 20 20 22 19 13 11 14 17 20 21 18 18 17 15 15 13 8 6 6 8 7 6
17 18 17 18 20 17 12 12 11 15 18 17 16 17 14 15 13 11 9 7 8 7 7 6
18 15 20 18 16 20 12 11 13 17 17 18 16 18 17 13 14 10 6 6 6 5 6 6
17 18 17 18 20 17 12 12 11 15 18 17 16 17 14 15 13 11 9 7 8 7 7 6
18 15 20 18 16 20 12 11 13 17 17 18 16 18 17 13 14 10 6 6 6 5 6 6
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
21 18 20 20 22 19 13 11 14 17 20 21 18 18 17 15 15 13 8 6 6 8 7 6
17 18 17 18 20 17 12 12 11 15 18 17 16 17 14 15 13 11 9 7 8 7 7 6
18 15 20 18 16 20 12 11 13 17 17 18 16 18 17 13 14 10 6 6 6 5 6 6
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
21 18 20 20 22 19 13 11 14 17 20 21 18 18 17 15 15 13 8 6 6 8 7 6
17 18 17 18 20 17 12 12 11 15 18 17 16 17 14 15 13 11 9 7 8 7 7 6
18 15 20 18 16 20 12 11 13 17 17 18 16 18 17 13 14 10 6 6 6 5 6 6
17 18 17 18 20 17 12 12 11 15 18 17 16 17 14 15 13 11 9 7 8 7 7 6
18 15 20 18 16 20 12 11 13 17 17 18 16 18 17 13 14 10 6 6 6 5 6 6
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
20 20 21 22 19 18 12 14 14 18 20 20 18 20 17 17 11 11 8 8 9 8 8 7
29 24 25 24 24 24 17 13 17 23 21 23 21 18 20 20 16 11 10 8 8 8 9 8
3 5 7 2 9 16 39 36 24 35 40 1 8 12 37 13 31 22 21 20
2 5 8 3 5 2 8 5 9 9 1 3 6 7 4 2 2 4 6 3







*/
